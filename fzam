#!/usr/bin/env bash

# FZAM - Fuzzy AppImage Manager | Manage AppImages on Linux.
# Depedencies: fzf, file, tree
# LICENSE: GNU General Public License v3.

# NOTE: The script and / or the author of the script do not take responsibility for any malware distributed as an AppImage.
# The user is advised to check for viruses in every AppImage they download and only download from reputable sources and not from a random GitHub page.
# The user may need to edit manually the .desktop file in case of any errors.

set -euo pipefail

## Variables
FMENU="fzf --layout=reverse \
           --exact \
           --border=bold \
           --border=rounded \
           --margin=5% \
           --multi \
           --color=dark \
           --height=95% \
           --info=hidden \
           --bind change:top \
           --prompt"

# Directories. A slash (/) at the end of every variable here is very important.
# Not having one will break the script.

# Directory where AppImages are placed.
APPIMAGEDIR="$HOME/Applications/"

# Directory where icons are placed
APPIMAGEICONDIR="${APPIMAGEDIR}.icons/"

# Directory where desktop entries are placed in order for desktop environments to find them.
# I recommend ~/.local/share/applications for a single user and /usr/local/share/applications for every user of the system.
AMDESKTOPDIR="$HOME/.local/share/applications/" 
verbose=0

# Functions
amintegrate() {
    selection=$(find $HOME \( -path ${APPIMAGEDIR::-1} -o -path $HOME/.local/share/Trash -o -path $HOME/.cache \) -prune -o -type f -iname "*.AppImage" -print | ${FMENU} "Please type the location of the AppImage: ") 
    if [ -n "$selection" ]; then
	## AppImage
	
	# Check if selection is an AppImage
	amformat=$(file "${selection}" | awk -F ',' '{print $1}' | sed "s#${selection}: ##")
	case $amformat in
	    "ELF 64-bit LSB pie executable"|"ELF 64-bit LSB executable")
                echo "This file is an AppImage."
                ;;
	    *)
                echo "This file is not an AppImage."
                exit 1
                ;;
    esac
	chmod +x "$selection"
	amname="$(basename "$selection" | tr 'A-Z' 'a-z' | awk -F '-' '{print $1}' | sed 's#.AppImage##I')"
	amlocation="${APPIMAGEDIR}${amname}.AppImage"
	mv -i "${selection}" ${amlocation}
	
	${amlocation} --appimage-extract > /dev/null || { echo "This is not a Type 2 AppImage"; exit 1; }

	## AppImage Icon
	if [[ -n "$(readlink -f squashfs-root/.DirIcon)" ]]; then
	    icon="$(readlink -f squashfs-root/.DirIcon)"
	    [[ "$verbose" -eq 1 ]] && echo "Found icon as $icon"

	    iconfmt="$(file ${icon} | awk '{print $2}' | tr 'A-Z' 'a-z')"
	    [[ "$verbose" -eq 1 ]] && echo "Icon format is: $iconfmt"

	    cp -i ${icon} ${APPIMAGEICONDIR}${amname}.${iconfmt} || echo "Could not copy icon file"
	    [[ "$verbose" -eq 1 ]] && echo "Copied icon file to $HOME/Applications/.icons"
	    
	    amicon="$(find ${APPIMAGEICONDIR} -type f -iname "*${amname}*")"
	else
	    echo "Could not find icon."
	    amicon="appimage"
	fi

	## AppImage .desktop file
	finddesktop="$(find ./squashfs-root/ -maxdepth 1 -iname "*.desktop" | xargs -I {} readlink -f {})"
	for desktopfile in ${finddesktop}
	do
	    [[ "$verbose" -eq 1 ]] && echo "Found .desktop file as $desktopfile"
	    
	    sed -i "/Exec/s#${amname}#${amlocation}#I" $desktopfile
	    sed -i "/Exec/s#AppRun#${amlocation}#I" $desktopfile
	    sed -i "/Icon/s#=.*#=${amicon}#I" $desktopfile
	    [[ "$verbose" -eq 1 ]] && echo "All sed substitutions were done."
	    
	    cp -i "${desktopfile}" $AMDESKTOPDIR || echo "Could not copy .desktop file"
	    [[ "$verbose" -eq 1 ]] && echo "Copied .desktop file to $AMDESKTOPDIR"
	done
	
	[[ -d "./squashfs-root" ]] && rm -rf squashfs-root
	[[ -d "./AppDir" ]] && rm -rf ./AppDir

	tput setaf 2 bold
	echo " ${selection} was successfully integrated."
	tput sgr0
    fi
}

amdelete() {
    selectiondel=""
    if [[ -d "${APPIMAGEDIR}" ]] && [[ -d "${APPIMAGEICONDIR}" ]]; then
        selectiondel="$(printf '%s\n' $(find "${APPIMAGEDIR}" -type f -iname "*.AppImage" | xargs -I {} basename {} | sort) | ${FMENU} "Choose an AppImage to remove: ")"
        amname="$(basename -s AppImage ${selectiondel})"

        tput setaf 1 bold
        read -p "${selectiondel} will be uninstalled. Are you sure? [y/N] "
        tput sgr0
            if [[ $REPLY =~ ^[Yy] ]]; then
                [[ "$verbose" -eq 1 ]] && echo "AppImage to be deleted: ${selectiondel}"

                rm "${APPIMAGEDIR}${selectiondel}" || echo "${selectiondel} was not found."
                [[ "$verbose" -eq 1 ]] && echo "Deleted AppImage: ${selectiondel}"

		founddesktop="$(grep -r "${selectiondel}" ${AMDESKTOPDIR} | awk -F ':' '{print $1}')"
                if [[ -n "$founddesktop" ]]; then
		    [[ "$verbose" -eq 1 ]] && echo "Found .desktop files: $(printf '%s, ' ${founddesktop[@]})"
		    for desktopfile in ${founddesktop}
		    do
			[[ -f $desktopfile && -n $desktopfile ]] && rm $desktopfile
			[[ "$verbose" -eq 1 ]] && echo "Deleted AppImage .desktop file"
		    done;
		fi
		foundicon="$(find ${APPIMAGEICONDIR} -type f -iname "${amname}*")"
                [[ -n $foundicon ]] && rm $foundicon || echo "No icon was found."
                [[ "$verbose" -eq 1 ]] && echo "Deleted icon"

                tput setaf 1 bold
                echo " ${selectiondel} was uninstalled."
                tput sgr0
            else
                echo "Operation canceled" && exit 0
            fi
    else
        echo "$(tput setaf 1 bold) No AppImages were found.$(tput sgr0)"
    fi
}

amlist() {
    if [[ -n $(\ls ${APPIMAGEDIR}) ]]; then
	echo "$(tput setaf 6 bold) AppImages currently installed:$(tput sgr0)"
	tree ${APPIMAGEDIR} -P '*.AppImage' --prune --noreport | sed '1d'
    else
	echo "$(tput setaf 1 bold) No AppImages were found.$(tput sgr0)"
    fi
}

amedit() {
        if [[ ! -f $HOME/.cache/fzam-edit ]]; then
                echo "By default fzam will open the .desktop file of an AppImage using the EDITOR variable."
                echo "This is currently set to: ${EDITOR}"
                echo "To override this run fzam like this: \$ EDITOR=PROGRAM fzam"
                touch $HOME/.cache/fzam-edit
        fi
        choice=$(grep -r -m 1 "\.AppImage" $AMDESKTOPDIR | sort | awk -F ":" '{print $1}' | ${FMENU} "Choose an AppImage entry to edit.")
        if [ -n $choice ]; then
                $EDITOR $choice
        fi
}

_checks() {
    if [ ! -d $APPIMAGEDIR ]; then
	echo "$APPIMAGEDIR directory does not exist. Creating it."
	mkdir $APPIMAGEDIR
    fi
    if [ ! -d $APPIMAGEICONDIR ]; then
	echo "$APPIMAGEICONDIR directory does not exist. Creating it."
	mkdir $APPIMAGEICONDIR
    fi
    if [ ! -d $AMDESKTOPDIR ]; then
	echo "$AMDESKTOPDIR directory does not exist. Creating it."
	mkdir $AMDESKTOPDIR
    fi
    if ! grep -q /home/john/Applications <<< $PATH; then
	echo "$HOME/Applications is not set in the PATH variable."
    fi

    if ! command -v fzf > /dev/null; then
	echo "fzf could not be found. Make sure that it is installed."
	exit 1
    fi

    if ! command -v tree > /dev/null; then
	echo "tree could not be found. Make sure that it is installed."
	exit 1
    fi

    if ! command -v xargs > /dev/null; then
	echo "xargs could not be found. Make sure that it is installed."
	exit 1
    fi
}

_version() {
    echo "Fuzzy AppImage Manager v0.1"
}

_help() {
    cat <<EOF
Description: Manage AppImages on Linux.
Usage: fzam [options]
       -h, --help     Display this help and exit.
       -l, --list     List all installed AppImages. Can be done through the fzam menu too.
       -V, --verbose  Start fzam with verbose messages enabled. Useful for identifying problems with AppImage installation.
       -v, --version  Output version information and exit.
EOF
}

_maincmd() {
    tput setaf 3 bold
    echo "What would you like to do?"
    tput sgr0
    options=(
	"Install/Integrate an AppImage"
	"Delete an AppImage"
	"Edit an AppImage entry"
	"List installed AppImages"
	"Quit"
    )
    choice=$(printf '%s\n' "${options[@]}" | ${FMENU} "")
    case $choice in
	${options[0]})
		amintegrate
		;;
	${options[1]})
		amdelete
		;;
	${options[2]})
		amedit
		;;
	${options[3]})
		amlist
		;;
	${options[4]})
		echo "Program Terminated" && exit 0
		;;
    esac
}

main() {
    _checks
    
    if [ "$#" -eq 0 ]; then
	_maincmd
    else
	case "$1" in
	    -h | --help)
		_help
		;;
	    -l | --list)
		amlist
		;;
	    -d | --debug)
		verbose=1
		echo "Running in debug / verbose mode."
		_maincmd
		;;
	    -v | --version)
		echo "FZAM | Fuzzy AppImage Manager v0.1"
		;;
	    *)
		echo "Unknown argument: $1"
		_help
		;;
	esac
    fi
}
main "$@"
